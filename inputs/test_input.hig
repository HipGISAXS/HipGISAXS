
hipGisaxsInput = {

	# can have any number of shapes
	shape = {
		key = "s1",							# a unique key to identify this shape in this file
		name = "truncpyr",					# code name of the shape (see list)
		originvec = [0 0 0],				# origin vector for the shape
		ztilt = 0,							# angle of shape tilt off the z-axis
		xyrotation = 0,						# rotation in xy plane
		param = {
			type = "height", min = 5, max = 10, stat = "gaussian", p1 = 7, p2 = 1, nvalues = 10 },
		param = {
			type = "xsize", min = 8, max = 12, stat = "uniform", nvalues = 10 },
		param = {
			type = "ysize", min = 50 },
		param = {
			type = "baseangle", min = 80, max = 90, stat = "gaussian", p1 = 85, p2 = 2, nvalues = 10 }
	},
	shape = {
		key = "s2",							# a unique key to identify this shape in this file
		name = "opv.shp",					# name of the file containing the discretized shape data
		originvec = [0 0 0],				# shape origin vector for FF
		ztilt = 5,
		xyrotation = 1
	},

	# can have any number of layers
	layer = {
		key = "l1",							# a unique key
		order = -1,							# special order code for the substrate layer
		thickness = -1,						# when the substrate layer is infinite
		refindex = { delta = 9.107E-06, beta = 2.466E-07 }
	},
	layer = {
		key = "l2",		                        	# a unique key
		order = 1,	                           		# order of this layer (top = 1 to bottom);
		thickness = 50,	                        	# layer thickness in nm
		refindex = { delta = 1e-06, beta = 1e-08 }	# layer refractive index parameters
	},
	layer = {
		key = "l3",
		order = 2,
		thickness = 100,
		refindex = { delta = 1.4e-6, beta = 7e-7 }
	},

	# can have any number of structures
	structure = {
		key = "st1",
		grain = {
			shape:key = "s1",									# key of the relevant shape
			refindex = { delta = 4.954E-06, beta = 1.304E-08 },	# refractive index parameters of grain
			layer:key = "l1",									# key of the relevant layer
			lattice = {
				a = [1 0 0], b = [0.3 0.6 0], c = [0.5 0.5 1]
			},								# lattice forming grain
			scaling = 46,					# scaling factor for lattice vectors
			transvec = [0 0 0],				# translation vector w.r.t. bottom of the layer
			repetition = [10 20 1]			# shape repetitions in x, y and z
		},
		ensemble = {
			spacing = [50 50 50],	    	# average grain spacings along x, y and z
			maxgrains = [100 100 1],	   	# maximum number of grains along x, y and z
			distribution = "random",	    # spatial domain distr. in irrad. Volume (see list)
			orientations = {
				stat = "range",								# domain orientation distr. (see list)
				rot1 = { axis = "x", angles = [90 90] },	# first rotation to apply to domain
				rot2 = { axis = "y", angles = [0 360] },	# second rotation to apply to domain
				rot3 = { axis = "z", angles = [90 90] }		# third rotation to apply to domain
			}
		}
	},
	structure = {
		key = "st2",
		grain = {
			shape:key = "s2",
			refindex = { delta = 4.954E-06, beta = 1.304E-08 },
			layer:key = "l2",
			lattice = {
				type = "fco", hkl = "110", abangle = 40, caratio = 2
			},
			transvec = [0 0 0],				# translation vector (unitary)
			scaling = 100,					# scaling factor for lattice vectors
			repetition = [10 10 10]			# shape lattice repetitions in x, y and z
		},
		ensemble = {
			spacing = [0 0 0],
			maxgrains = [10 10 10],
			distribution = "reg",
			orientations = { stat = "single" }
		}
	},

	instrumentation = {						# there is exactly one set of configuration
		scattering = {
			expt = "gisaxs",
			alphai = { min = 0.1, max = 0.16, step = 0.01 },	# incidence angles
			inplanerot = { min = 0, max = 90, step = 5 },		# in-plane sample rotation angles
			tilt = { min = 0, max = 1, step = 0.2 },			# sample tilt angles
			photon = { value = 10000, unit = "ev" },			# photon energy
			polarization = "s",									# wave polarization (see list)
			coherence = 300,									# coherence length
			spotarea = 0.3,										# beam spot area at sample location
			smearing = [2 2 2]									# smearing coefficients in x, y and z
		},
		detector = {
			origin = "tl",					# origin corner of 2D plot: top/bottom, left/right
			totalpixels = [1000 1000],		# number of pixels in X and Y
			pixelsize = 0.172,				# pixel size of the detector
			sdd = 4128.62,					# sample to detector distance
			directbeam = [489.916 843.076],	# position of direct beam
		}
	},

	computation = {
		pathprefix = ".",	    			# path prefix to input and output directories
		inputdir = "sample",				# name/relative path of input directory
		runname = "samplemodel1",   		# name for current run (directory name for outputs)
		method = "dwba",			    	# theorical approach (see list)
		outputregion = { type = "pixels", minpoint = [350 710], maxpoint = [650 900] },
		resolution = [2 2],  				# number of q points per pixel
		nslices = 20		    			# max number of slices for slicing algorithm

		# add more stuff:
		# saverawgisaxs = yes
		# savesf = no
		# saveff = no
	}
}
